import sys
import os
import telebot
from telebot import types
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ src
src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'src'))
print(f"–ü—É—Ç—å –∫ src: {src_path}")
if not os.path.exists(src_path):
    print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    sys.exit(1)
sys.path.insert(0, src_path)

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ src (—Å —É—á–µ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞–ø–æ–∫ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
try:
    from clickjacking.clickjacking import ClickJacking
    from dnslookup.dnslookup import DnsLookup
    from http_headers_grabber.http_headers_grabber import HttpHeadersGrabber
    from ip.ip import Ip
    from ip_info_finder.ip_info_finder import IpInfoFinder
    from logger.logger import Logger
    from nmap_scanner.nmap_scanner import NmapScanner
    from one_sec_mail.one_sec_mail import OneSecMail
    from phone_info.phone_info import PhoneInfo
    from pwned.pwned import PasswordPwned
    from robots_scanner.robots_scanner import RobotsScanner
    from whois_lookup.whois_lookup import WhoisLookup
except ModuleNotFoundError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    print("–û—à–∏–±–∫–∞: API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ª–æ–≥–≥–µ—Ä–∞
bot = telebot.TeleBot(API_TOKEN)
logger = Logger("GodsEyeBot", "bot.log")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def send_long_message(chat_id, text):
    for i in range(0, len(text), 4096):
        bot.send_message(chat_id, text[i:i + 4096])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gods-eye Bot! üëÅÔ∏è\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/phoneinfo <–Ω–æ–º–µ—Ä> ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /phoneinfo +12025550123)\n"
        "/dnslookup <–¥–æ–º–µ–Ω> ‚Äî DNS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /dnslookup google.com)\n"
        "/clickjacking <–¥–æ–º–µ–Ω> ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /clickjacking example.com)\n"
        "/httpheaders <–¥–æ–º–µ–Ω> ‚Äî –ü–æ–ª—É—á–∏—Ç—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /httpheaders google.com)\n"
        "/getip <–¥–æ–º–µ–Ω> ‚Äî –ü–æ–ª—É—á–∏—Ç—å IP –¥–æ–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /getip google.com)\n"
        "/ipinfo <ip> ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, /ipinfo 8.8.8.8)\n"
        "/nmap <—Ü–µ–ª—å> ‚Äî –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Nmap (–Ω–∞–ø—Ä–∏–º–µ—Ä, /nmap 192.168.1.1)\n"
        "/genemail ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email\n"
        "/pwned <–ø–∞—Ä–æ–ª—å> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ —É—Ç–µ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /pwned mypassword)\n"
        "/robots <–¥–æ–º–µ–Ω> ‚Äî –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å robots.txt (–Ω–∞–ø—Ä–∏–º–µ—Ä, /robots google.com)\n"
        "/whois <–¥–æ–º–µ–Ω> ‚Äî WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /whois google.com)"
    )
    bot.send_message(message.chat.id, welcome_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /phoneinfo
@bot.message_handler(commands=['phoneinfo'])
def handle_phoneinfo(message):
    try:
        phone_number = message.text.split(' ', 1)[1]
        phone_info = PhoneInfo(phone_number)
        country = phone_info.get_country()
        operator = phone_info.get_operator()
        response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ {phone_number}:\n–°—Ç—Ä–∞–Ω–∞: {country}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}"
        bot.send_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ {phone_number}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /phoneinfo +12025550123")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dnslookup
@bot.message_handler(commands=['dnslookup'])
def handle_dnslookup(message):
    try:
        domain = message.text.split(' ', 1)[1]
        dns_lookup = DnsLookup(domain)
        dns_info = dns_lookup.get_info()
        response = f"DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {domain}:\n{dns_info}"
        send_long_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª DNS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {domain}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /dnslookup google.com")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –¥–æ–º–µ–Ω –¥–ª—è DNS-–∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ DNS-–∑–∞–ø—Ä–æ—Å–µ: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clickjacking
@bot.message_handler(commands=['clickjacking'])
def handle_clickjacking(message):
    try:
        domain = message.text.split(' ', 1)[1]
        clickjacking = ClickJacking(domain)
        is_vulnerable = clickjacking.is_vulnerable()
        if is_vulnerable:
            bot.send_message(message.chat.id, f"–í–Ω–∏–º–∞–Ω–∏–µ! –î–æ–º–µ–Ω {domain} —É—è–∑–≤–∏–º –∫ Clickjacking!")
        else:
            bot.send_message(message.chat.id, f"–î–æ–º–µ–Ω {domain} –Ω–µ —É—è–∑–≤–∏–º –∫ Clickjacking.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª —É—è–∑–≤–∏–º–æ—Å—Ç—å {domain} –∫ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥—É")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /clickjacking example.com")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /httpheaders
@bot.message_handler(commands=['httpheaders'])
def handle_httpheaders(message):
    try:
        domain = message.text.split(' ', 1)[1]
        headers_grabber = HttpHeadersGrabber(domain)
        headers = headers_grabber.get_headers()
        response = f"HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è {domain}:\n"
        for key, value in headers.items():
            response += f"{key}: {value}\n"
        send_long_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è {domain}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /httpheaders google.com")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –¥–æ–º–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getip
@bot.message_handler(commands=['getip'])
def handle_getip(message):
    try:
        domain = message.text.split(' ', 1)[1]
        ip = Ip(domain)
        ip_address = ip.get_ip()
        response = f"IP-–∞–¥—Ä–µ—Å –¥–æ–º–µ–Ω–∞ {domain}:\n{ip_address}"
        bot.send_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª IP –¥–ª—è {domain}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /getip google.com")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –¥–æ–º–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ipinfo
@bot.message_handler(commands=['ipinfo'])
def handle_ipinfo(message):
    try:
        ip = message.text.split(' ', 1)[1]
        ip_info = IpInfoFinder(ip)
        info = ip_info.get_info()
        response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP {ip}:\n"
        for key, value in info.items():
            response += f"{key}: {value}\n"
        send_long_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP {ip}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /ipinfo 8.8.8.8")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª IP")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nmap
@bot.message_handler(commands=['nmap'])
def handle_nmap(message):
    try:
        target = message.text.split(' ', 1)[1]
        nmap = NmapScanner(target)
        result = nmap.scan()
        response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Nmap –¥–ª—è {target}:\n{result}"
        send_long_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª Nmap-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {target}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /nmap 192.168.1.1")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª —Ü–µ–ª—å –¥–ª—è Nmap-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ Nmap-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /genemail
@bot.message_handler(commands=['genemail'])
def handle_genemail(message):
    try:
        email_generator = OneSecMail()
        email = email_generator.generate_email()
        response = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π email:\n{email[0] if isinstance(email, list) else email}"
        bot.send_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π email")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pwned
@bot.message_handler(commands=['pwned'])
def handle_pwned(message):
    try:
        password = message.text.split(' ', 1)[1]
        pwned = PasswordPwned(password)
        count = pwned.is_pwned()
        if count > 0:
            response = f"–ü–∞—Ä–æ–ª—å '{password}' –±—ã–ª —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω {count} —Ä–∞–∑!"
        elif count == 0:
            response = f"–ü–∞—Ä–æ–ª—å '{password}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö."
        else:
            response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å."
        bot.send_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–∞—Ä–æ–ª—å")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /pwned mypassword")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –ø–∞—Ä–æ–ª—å")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /robots
@bot.message_handler(commands=['robots'])
def handle_robots(message):
    try:
        domain = message.text.split(' ', 1)[1]
        robots = RobotsScanner(domain)
        result = robots.scan()
        response = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ robots.txt –¥–ª—è {domain}:\n{result}"
        send_long_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª robots.txt –¥–ª—è {domain}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /robots google.com")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –¥–æ–º–µ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è robots.txt")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ robots.txt: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /whois
@bot.message_handler(commands=['whois'])
def handle_whois(message):
    try:
        domain = message.text.split(' ', 1)[1]
        whois = WhoisLookup(domain)
        result = whois.get_info()
        response = f"WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {domain}:\n{result}"
        send_long_message(message.chat.id, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {domain}")
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /whois google.com")
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª –¥–æ–º–µ–Ω –¥–ª—è WHOIS-–∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ WHOIS-–∑–∞–ø—Ä–æ—Å–µ: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.polling(non_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        sys.exit(1)