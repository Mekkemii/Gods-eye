import sys
import os
import logging
from dotenv import load_dotenv
from telegram.ext import Updater, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ src
src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'src'))
print(f"–ü—É—Ç—å –∫ src: {src_path}")
if not os.path.exists(src_path):
    print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    sys.exit(1)
sys.path.insert(0, src_path)

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–∑ src
try:
    from click_jacking.click_jacking import ClickJacking
    from dns_lookup.dns_lookup import DnsLookup
    from http_headers_grabber.http_headers_grabber import HttpHeadersGrabber
    from ip.ip_class import GetHostname  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    from ip_info_finder.ip_info_finder import IpInfoFinder
    from logger.logger import Logger
    from nmap_scanner.nmap_scanner import NmapScanner
    from one_sec_mail.one_sec_mail import OneSecMail
    from phone_info.phone_info import PhoneInfo
    from pwned.pwned import PasswordPwned
    from robots_scanner.robots_scanner import RobotsScanner
    from whois_lookup.whois_lookup import WhoisLookup
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    print("–û—à–∏–±–∫–∞: API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def send_long_message(update, text):
    for i in range(0, len(text), 4096):
        update.message.reply_text(text[i:i + 4096])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def handle_start(update, context):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gods-eye Bot! üëÅÔ∏è\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/phoneinfo <–Ω–æ–º–µ—Ä> ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /phoneinfo +12025550123)\n"
        "/dnslookup <–¥–æ–º–µ–Ω> ‚Äî DNS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /dnslookup google.com)\n"
        "/clickjacking <–¥–æ–º–µ–Ω> ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /clickjacking example.com)\n"
        "/httpheaders <–¥–æ–º–µ–Ω> ‚Äî –ü–æ–ª—É—á–∏—Ç—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /httpheaders google.com)\n"
        "/getip <–¥–æ–º–µ–Ω> ‚Äî –ü–æ–ª—É—á–∏—Ç—å IP –¥–æ–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /getip google.com)\n"
        "/ipinfo <ip> ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, /ipinfo 8.8.8.8)\n"
        "/nmap <—Ü–µ–ª—å> ‚Äî –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Nmap (–Ω–∞–ø—Ä–∏–º–µ—Ä, /nmap 192.168.1.1)\n"
        "/genemail ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email\n"
        "/pwned <–ø–∞—Ä–æ–ª—å> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ —É—Ç–µ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /pwned mypassword)\n"
        "/robots <–¥–æ–º–µ–Ω> ‚Äî –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å robots.txt (–Ω–∞–ø—Ä–∏–º–µ—Ä, /robots google.com)\n"
        "/whois <–¥–æ–º–µ–Ω> ‚Äî WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /whois google.com)"
    )
    update.message.reply_text(welcome_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /phoneinfo
def handle_phoneinfo(update, context):
    try:
        phone_number = context.args[0]
        phone_info = PhoneInfo(phone_number)
        country = phone_info.get_country()
        operator = phone_info.get_operator()
        response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ {phone_number}:\n–°—Ç—Ä–∞–Ω–∞: {country}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}"
        update.message.reply_text(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ {phone_number}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: /phoneinfo +12025550123")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dnslookup
def handle_dnslookup(update, context):
    try:
        domain = context.args[0]
        dns_lookup = DnsLookup(domain)
        dns_info = dns_lookup.get_info()
        response = f"DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {domain}:\n{dns_info}"
        send_long_message(update, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª DNS –¥–ª—è {domain}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω: /dnslookup google.com")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clickjacking
def handle_clickjacking(update, context):
    try:
        domain = context.args[0]
        clickjacking = ClickJacking(domain)
        is_vulnerable = clickjacking.is_vulnerable()
        response = f"–î–æ–º–µ–Ω {domain} —É—è–∑–≤–∏–º –∫ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥—É!" if is_vulnerable else f"–î–æ–º–µ–Ω {domain} –Ω–µ —É—è–∑–≤–∏–º."
        update.message.reply_text(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª {domain} –Ω–∞ –∫–ª–∏–∫–¥–∂–µ–∫–∏–Ω–≥")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω: /clickjacking example.com")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /httpheaders
def handle_httpheaders(update, context):
    try:
        domain = context.args[0]
        headers_grabber = HttpHeadersGrabber(domain)
        headers = headers_grabber.get_headers()
        response = f"HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è {domain}:\n{headers}"
        send_long_message(update, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è {domain}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω: /httpheaders google.com")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getip
def handle_getip(update, context):
    try:
        hostname_ip = GetHostname()
        hostname = hostname_ip.get_hostname()
        ip_address = hostname_ip.get_ip()
        response = f"Hostname: {hostname}\n–õ–æ–∫–∞–ª—å–Ω—ã–π IP: {ip_address}"
        update.message.reply_text(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª hostname –∏ IP")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ipinfo
def handle_ipinfo(update, context):
    try:
        ip = context.args[0]
        ip_info = IpInfoFinder(ip)
        info = ip_info.get_info()
        response = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP {ip}:\n{info}"
        send_long_message(update, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP {ip}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ IP: /ipinfo 8.8.8.8")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nmap
def handle_nmap(update, context):
    try:
        target = context.args[0]
        nmap = NmapScanner(target)
        result = nmap.scan()
        response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç Nmap –¥–ª—è {target}:\n{result}"
        send_long_message(update, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª Nmap –¥–ª—è {target}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å: /nmap 192.168.1.1")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /genemail
def handle_genemail(update, context):
    try:
        email_generator = OneSecMail()
        email = email_generator.generate_email()
        response = f"–í—Ä–µ–º–µ–Ω–Ω—ã–π email:\n{email}"
        update.message.reply_text(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª email")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pwned
def handle_pwned(update, context):
    try:
        password = context.args[0]
        pwned = PasswordPwned(password)
        count = pwned.is_pwned()
        response = f"–ü–∞—Ä–æ–ª—å '{password}' —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω {count} —Ä–∞–∑!" if count > 0 else f"–ü–∞—Ä–æ–ª—å '{password}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö."
        update.message.reply_text(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–∞—Ä–æ–ª—å")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /pwned mypassword")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /robots
def handle_robots(update, context):
    try:
        domain = context.args[0]
        robots = RobotsScanner(domain)
        result = robots.scan()
        response = f"robots.txt –¥–ª—è {domain}:\n{result}"
        send_long_message(update, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª robots.txt –¥–ª—è {domain}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω: /robots google.com")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /whois
def handle_whois(update, context):
    try:
        domain = context.args[0]
        whois = WhoisLookup(domain)
        result = whois.get_info()
        response = f"WHOIS –¥–ª—è {domain}:\n{result}"
        send_long_message(update, response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª WHOIS –¥–ª—è {domain}")
    except IndexError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω: /whois google.com")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def handle_unknown(update, context):
    update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update, context):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    updater = Updater(API_TOKEN)
    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.add_handler(CommandHandler("start", handle_start))
    dp.add_handler(CommandHandler("phoneinfo", handle_phoneinfo))
    dp.add_handler(CommandHandler("dnslookup", handle_dnslookup))
    dp.add_handler(CommandHandler("clickjacking", handle_clickjacking))
    dp.add_handler(CommandHandler("httpheaders", handle_httpheaders))
    dp.add_handler(CommandHandler("getip", handle_getip))
    dp.add_handler(CommandHandler("ipinfo", handle_ipinfo))
    dp.add_handler(CommandHandler("nmap", handle_nmap))
    dp.add_handler(CommandHandler("genemail", handle_genemail))
    dp.add_handler(CommandHandler("pwned", handle_pwned))
    dp.add_handler(CommandHandler("robots", handle_robots))
    dp.add_handler(CommandHandler("whois", handle_whois))
    dp.add_handler(MessageHandler(Filters.command, handle_unknown))
    dp.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()